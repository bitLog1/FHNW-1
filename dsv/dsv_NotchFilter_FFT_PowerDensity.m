%******************************************************************************
% \details     : 
% \autor       : Simon Burkhardt
% \file        : dsv_NotchFilter_FFT_PowerDensity.m
% \date        : 04.11.2019
% \version     : 1.0
%******************************************************************************
clear all; close all; clc;
format shorteng;


% function Hd = NotchFilter_1khz
%NOTCHFILTER_1KHZ Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.7 and Signal Processing Toolbox 8.3.
% Generated on: 04-Nov-2019 12:30:04

% Butterworth Bandpass filter designed using FDESIGN.BANDPASS.

% All frequency values are in Hz.
Fs = 48000;  % Sampling Frequency

Fstop1 = 900;         % First Stopband Frequency
Fpass1 = 950;         % First Passband Frequency
Fpass2 = 1050;        % Second Passband Frequency
Fstop2 = 1100;        % Second Stopband Frequency
Astop1 = 60;          % First Stopband Attenuation (dB)
Apass  = 1;           % Passband Ripple (dB)
Astop2 = 60;          % Second Stopband Attenuation (dB)
match  = 'stopband';  % Band to match exactly

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.bandpass(Fstop1, Fpass1, Fpass2, Fstop2, Astop1, Apass, ...
                      Astop2, Fs);
Hd = design(h, 'butter', 'MatchExactly', match);


x = rand(1, Fs*3);
x(1)

%%
N = 256;

x = rand(1, Fs*3);

y = filter(Hd, x);
% plot(y(1000:10000))

% soundsc(y, Fs);  % play sound


%%
w = hanning(N);
% w = ones(1,N);

ys = y(10*4*N:11*4*N);

y1 = w'.*ys(1:N);
y2 = w'.*ys(N+1:2*N);
y3 = w'.*ys(2*N+1:3*N);
y4 = w'.*ys(3*N+1:4*N);
% plot(y1); hold on
% plot(y2);
% plot(y3);
% plot(y4);

Y1 = fft(y1); 
Y2 = fft(y2);
Y3 = fft(y3);
Y4 = fft(y4);

Ydd = mean([Y1; Y2; Y3; Y4], 1);

% Y = abs( fft(ys) );

f = linspace(0, Fs/2, N/2);

Y = 256*abs(Ydd);
plot(f, 10* log10(Y(1:N/2) ))
hold on;








